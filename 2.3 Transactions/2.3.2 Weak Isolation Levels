Concurrency issues come into play when two trans try to simultaneously modify the same data, or when one transaction reads data concurrently being written bu another transaction. Bugs are hard to find by testing because such bugs are only triggered when you get unlucky with timing. Such timing issues are diff to reproduce as they occur rarely. Also, in large appl we don't know which piece of code is accessing the DBs. Having many conc users makes it harder because any data can change unexpectedly at any time. 
So DBs try to hide conc issues using trans isolation.In theory, we pretend no concurrency - serializable isolation. DB makes it look like two conc operations are actually running serially. But serializable isolation has perf cost and most DB don't implement - but rather use weaker levels of isolation which protect against some concurrency issues not all. These levels of isolation are harder to understand and leads to subtle bugs
Understanding conc issues properly and how to solve them is required to build apps that are reliable and correct, using tools at disposal. Diff kinds of race conditions can and can't occur at diff levels of isolation - then we can decide which level is approp for our system

Read Committed
