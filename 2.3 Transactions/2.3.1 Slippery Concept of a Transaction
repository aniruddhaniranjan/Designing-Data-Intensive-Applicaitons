Things that can go wrong in data systems:
 DB software or hardware may fail (even in middle of an operation)
 Application may crash anytim (halfway thru a series of operations)
 Nw interruptions can cut off appl from DB or DB nodes from each other
 Several clients write to DB overwriting each others changes
 Client reads data that doesn't make sense since it's only partially written
 Race conditions b/w clients can cause unexpected bugs
Reliable systems have to deal with these to prevent catastrophe. Implementing fault tolerance mechanisms is tough - think about everything that can go wrong, test everything to ensure it solves the problems

A Transaction is a way for an application to group several reads and writes together into a logical unit. Conceptually, these reads and writes in a transaction are executed as one operation: either the entire transaction succeeds (commit) or it fails (abort, rollback). If it fails, app can safely retry. Error handling becomes easy due to no partial failures - some ops fails and some succeed
Goal is to simplify the programming model for apps accessing a DB. App is now free to ignore certain potential error scenarios and concurrency issues because DB takes care - these are called "Safety Guarantees". Not all apps need them - adv of weakening trans guarantee or removing is higher performance/availability. Some safety properties can be achieved without.
Relation DBs always had transactions. Nonrelational NoSQL DBs introduced a new data model with replication and partitioning. Transactions were a casualty of this - many systems abandoned transactions or redefined it to mean a much weaker set of safety guarantees.

Meaning of ACID
Safety guarantees provided by transactions are described by acronym ACID - Atomicity, Consistency, Isolation and Durability. Often guarantees provided by "ACID compliant" systems are not clear. Systems that don't meet ACID are called BASE - Basically Available, Soft state and Eventually consistency

a. Atomicity - In multi-threaded, if one thread executes an atomic op, another thread can't see the half finished result (system has two states, one before and one after the atomic op)
But in ACID, atomicity describes what happens if a client wants to make several writes but a fault occurs after some of them are processed - then the transaction can't be completed (committed) due to a fault. Then transaction is aborted and changes discarded/undone. This ensures safe retry because we know changes are discarded and won't be repeated.

b. Consistency - Refers to app specific notion of DB being in a "good state". Idea is that you have certain statements about you data that must always be true - "Invariants" (in acct system, credits and debits must be balanced). If a transaction starts with a DB that is valid according to these invariants, and the transaction writes preserve this validity, then the invariants are always satisfied. This depends on apps notion of invariants and is apps responsibility, not the DB (app decides which data to write, DB only stores it). App may rely on atomicity and isolation properties of the DB in order to achieve consistency.

c. Isolation - DB access from multiple clients is not a problem if they access diff parts of DB. If they access the same parts, then it leads to a race condition. Isolation means that transactions executing concurrently are isolated from each other - can't step on each other. It is also called "Serializability" - each transaction can pretend it's the only transaction running on the entire Db. The DB ensures that when the concurrent transactions have finished executing, the result is the same as if they had run serially "one after another". Serializable Isolation has a high performance impact.

d. Durability - Promise that once a transaction has committed successfully, data written will not be forgotten even if HW fails or DB crashes. In single-node DB, it means data is stored in SSD/hard drive. It usually also involves a write-ahead log or similar which allows recovery in case data structures on disk are corrupted. In replicated DB, it means data is copied to some number of nodes. In order to provide durability guarantee, DB must wait till these writes or replications are complete before reporting transaction as successfully committed. Perfect durability doesn't exist.

Single Object and Multi-Object Operations
Atomicity - DB saves you from worrying about partial failure by guaranteeing all-or-nothing semantics
Isolation - Concurrent transaction should see all updates from other conc transaction or none of the transaction, but not a subset
Multi-object transaction are needed if several pieces of data need to be kept in sync. Example - list of unread emails and number of unread emails.
Need for atomicity - Listing could show unread email but count is 0, because new email is added to list (first write is complete) but counter is not yet incremented (we are seeing state before second write is complete). We should not see half way point - both or none
Need for isolation - If error occurs somewhere in transaction the list and count could be out of sync. If update to counter fails, then transaction is aborted and inserted new email is rolled back from the list
To determine which operations are in same transaction relation DB uses TCP connection to client - on any connection everything between BEGIN TRANSACTION and COMMIT is considered same transaction. Many nonrelational DBs don't have such a semantics for multi-put (put for some documents succeed and don't for others)

Single-object writes - 
