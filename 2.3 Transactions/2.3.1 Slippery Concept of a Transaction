Things that can go wrong in data systems:
 DB software or hardware may fail (even in middle of an operation)
 Application may crash anytim (halfway thru a series of operations)
 Nw interruptions can cut off appl from DB or DB nodes from each other
 Several clients write to DB overwriting each others changes
 Client reads data that doesn't make sense since it's only partially written
 Race conditions b/w clients can cause unexpected bugs
Reliable systems have to deal with these to prevent catastrophe. Implementing fault tolerance mechanisms is tough - think about everything that can go wrong, test everything to ensure it solves the problems

A Transaction is a way for an application to group several reads and writes together into a logical unit. Conceptually, these reads and writes in a transaction are executed as one operation: either the entire transaction succeeds (commit) or it fails (abort, rollback). If it fails, app can safely retry. Error handling becomes easy due to no partial failures - some ops fails and some succeed
Goal is to simplify the programming model for apps accessing a DB. App is now free to ignore certain potential error scenarios and concurrency issues because DB takes care - these are called "Safety Guarantees". Not all apps need them - adv of weakening trans guarantee or removing is higher performance/availability. Some safety properties can be achieved without.
Relation DBs always had transactions. Nonrelational NoSQL DBs introduced a new data model with replication and partitioning. Transactions were a casualty of this - many systems abandoned transactions or redefined it to mean a much weaker set of safety guarantees.

Meaning of ACID
Safety guarantees provided by transactions are described by acronym ACID - Atomicity, Consistency, Isolation and Durability. Often guarantees provided by "ACID compliant" systems are not clear. Systems that don't meet ACID are called BASE - Basically Available, Soft state and Eventually consistency

a. Atomicity - In multi-threaded, if one thread executes an atomic op, another thread can't see the half finished result (system has two states, one before and one after the atomic op)
But in ACID, atomicity describes what happens if a client wants to make several writes but a fault occurs after some of them are processed - then the transaction can't be completed (committed) due to a fault. Then transaction is aborted and changes discarded/undone. This ensures safe retry because we know changes are discarded and won't be repeated.

b. Consistency - 

Single Object and Multi-Object Operations
